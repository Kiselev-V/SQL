Изначальные данные:
имеются 6 таблиц - courier_actions, couriers, orders, products, user_actions, users. 
В каждой таблице есть столбцы с данными.
courier_actions (action CHARACTER VARYING, courier_id INTEGER, order_id INTEGER, time TIMESTAMP WITHOUT TIME ZONE)
couriers (birth_date DATE, courier_id INTEGER, sex CHARACTER VARYING)
orders(creation_time TIMESTAMP WITHOUT TIME ZONE, order_id INTEGER, product_ids ARRAY)
products(name CHARACTER VARYING, price NUMERIC, product_id INTEGER)
user_actions (action CHARACTER VARYING, order_id INTEGER, time TIMESTAMP WITHOUT TIME ZONE, user_id INTEGER)
users(birth_date DATE, sex CHARACTER VARYING, user_id INTEGER)

Задача 9.
-- Давайте проведём небольшую аналитику нашего сервиса и посчитаем, сколько в среднем товаров заказывает каждый пользователь.

SELECT user_id,
       order_id,
       product_ids
FROM   user_actions
    LEFT JOIN orders using(order_id)
ORDER BY user_id, order_id limit 1000

Задача 10.
-- Теперь немного уточним наш запрос, поскольку нас интересуют не все заказы из таблицы user_actions, а только те, которые не были отменены пользователями, причём уникальные.

SELECT user_id,
       order_id,
       product_ids
FROM   user_actions
    LEFT JOIN orders using (order_id)
WHERE  order_id not in (SELECT order_id
                        FROM   user_actions
                        WHERE  action = 'cancel_order')
ORDER BY user_id asc, order_id asc limit 1000



Задача 11.
-- Кажется, всё готово к тому, чтобы для каждого пользователя посчитать среднее количество товаров в заказе.

SELECT user_id,
       round(avg(array_length(product_ids, 1)), 2) as avg_order_size
FROM   (SELECT user_id,
               order_id
        FROM   user_actions
        WHERE  order_id not in (SELECT order_id
                                FROM   user_actions
                                WHERE  action = 'cancel_order')) t1
    LEFT JOIN orders using(order_id)
GROUP BY user_id
ORDER BY user_id limit 1000



Задача 12.
--А что если бы мы захотели сделать более подробную аналитику и, например, посчитать среднюю стоимость заказа (средний чек) каждого клиента? Для этого нам бы уже потребовалась информация о стоимости каждого отдельного заказа. Давайте проведём такие расчёты.

SELECT order_id,
       product_id,
       price
FROM   (SELECT order_id,
               product_ids,
               unnest(product_ids) as product_id
        FROM   orders) as t
    LEFT JOIN products using(product_id)
ORDER BY order_id, product_id limit 1000



Задача 13. 
-- Имея таблицу с заказами, входящими в них товарами и ценами на эти товары, можно теперь легко посчитать стоимость каждого заказа.

SELECT order_id,
       sum(price) as order_price
FROM   (SELECT order_id,
               product_ids,
               unnest(product_ids) as product_id
        FROM   orders) t1
    LEFT JOIN products using(product_id)
GROUP BY order_id
ORDER BY order_id limit 1000



Задача 14.
--Давайте объединим в один запрос данные о количестве товаров в заказах наших пользователей с информацией о стоимости каждого заказа, а затем рассчитаем несколько полезных показателей.

SELECT user_id,
       count(order_price) as orders_count,
       round(avg(order_size), 2) as avg_order_size,
       sum(order_price) as sum_order_value,
       round(avg(order_price), 2) as avg_order_value,
       min(order_price) as min_order_value,
       max(order_price) as max_order_value
FROM   (SELECT user_id,
               order_id,
               array_length(product_ids, 1) as order_size
        FROM   (SELECT user_id,
                       order_id
                FROM   user_actions
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t1
            LEFT JOIN orders using(order_id)) t2
    LEFT JOIN (SELECT order_id,
                      sum(price) as order_price
               FROM   (SELECT order_id,
                              product_ids,
                              unnest(product_ids) as product_id
                       FROM   orders
                       WHERE  order_id not in (SELECT order_id
                                               FROM   user_actions
                                               WHERE  action = 'cancel_order')) t3
                   LEFT JOIN products using(product_id)
               GROUP BY order_id) t4 using (order_id)
GROUP BY user_id
ORDER BY user_id limit 1000
